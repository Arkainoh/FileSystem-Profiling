1322 struct super_block {
1323         struct list_head        s_list;         /* Keep this first */
1324         dev_t                   s_dev;          /* search index; _not_ kdev_t */
1325         unsigned char           s_blocksize_bits;
1326         unsigned long           s_blocksize;
1327         loff_t                  s_maxbytes;     /* Max file size */
1328         struct file_system_type *s_type;
1329         const struct super_operations   *s_op;
1330         const struct dquot_operations   *dq_op;
1331         const struct quotactl_ops       *s_qcop;
1332         const struct export_operations *s_export_op;
1333         unsigned long           s_flags;
1334         unsigned long           s_iflags;       /* internal SB_I_* flags */
1335         unsigned long           s_magic;
1336         struct dentry           *s_root;
1337         struct rw_semaphore     s_umount;
1338         int                     s_count;
1339         atomic_t                s_active;
1340 #ifdef CONFIG_SECURITY
1341         void                    *s_security;
1342 #endif
1343         const struct xattr_handler **s_xattr;
1344 
1345         const struct fscrypt_operations *s_cop;
1346 
1347         struct hlist_bl_head    s_anon;         /* anonymous dentries for (nfs) exporting */
1348         struct list_head        s_mounts;       /* list of mounts; _not_ for fs use */
1349         struct block_device     *s_bdev;
1350         struct backing_dev_info *s_bdi;
1351         struct mtd_info         *s_mtd;
1352         struct hlist_node       s_instances;
1353         unsigned int            s_quota_types;  /* Bitmask of supported quota types */
1354         struct quota_info       s_dquot;        /* Diskquota specific options */
1355 
1356         struct sb_writers       s_writers;
1357 
1358         char s_id[32];                          /* Informational name */
1359         u8 s_uuid[16];                          /* UUID */
1360 
1361         void                    *s_fs_info;     /* Filesystem private info */
1362         unsigned int            s_max_links;
1363         fmode_t                 s_mode;
1364 
1365         /* Granularity of c/m/atime in ns.
1366            Cannot be worse than a second */
1367         u32                s_time_gran;
1368 
1369         /*
1370          * The next field is for VFS *only*. No filesystems have any business
1371          * even looking at it. You had been warned.
1372          */
1373         struct mutex s_vfs_rename_mutex;        /* Kludge */
1374 
1375         /*
1376          * Filesystem subtype.  If non-empty the filesystem type field
1377          * in /proc/mounts will be "type.subtype"
1378          */
1379         char *s_subtype;
1380 
1381         /*
1382          * Saved mount options for lazy filesystems using
1383          * generic_show_options()
1384          */
1385         char __rcu *s_options;
1386         const struct dentry_operations *s_d_op; /* default d_op for dentries */
1387 
1388         /*
1389          * Saved pool identifier for cleancache (-1 means none)
1390          */
1391         int cleancache_poolid;
1392 
1393         struct shrinker s_shrink;       /* per-sb shrinker handle */
1394 
1395         /* Number of inodes with nlink == 0 but still referenced */
1396         atomic_long_t s_remove_count;
1397 
1398         /* Being remounted read-only */
1399         int s_readonly_remount;
1400 
1401         /* AIO completions deferred from interrupt context */
1402         struct workqueue_struct *s_dio_done_wq;
1403         struct hlist_head s_pins;
1404 
1405         /*
1406          * Owning user namespace and default context in which to
1407          * interpret filesystem uids, gids, quotas, device nodes,
1408          * xattrs and security labels.
1409          */
1410         struct user_namespace *s_user_ns;
1411 
1412         /*
1413          * Keep the lru lists last in the structure so they always sit on their
1414          * own individual cachelines.
1415          */
1416         struct list_lru         s_dentry_lru ____cacheline_aligned_in_smp;
1417         struct list_lru         s_inode_lru ____cacheline_aligned_in_smp;
1418         struct rcu_head         rcu;
1419         struct work_struct      destroy_work;
1420 
1421         struct mutex            s_sync_lock;    /* sync serialisation lock */
1422 
1423         /*
1424          * Indicates how deep in a filesystem stack this SB is
1425          */
1426         int s_stack_depth;
1427 
1428         /* s_inode_list_lock protects s_inodes */
1429         spinlock_t              s_inode_list_lock ____cacheline_aligned_in_smp;
1430         struct list_head        s_inodes;       /* all inodes */
1431 
1432         spinlock_t              s_inode_wblist_lock;
1433         struct list_head        s_inodes_wb;    /* writeback inodes */
1434 };