 26 struct bio {
 27         struct bio              *bi_next;       /* request queue link */
 28         struct block_device     *bi_bdev;
 29         int                     bi_error;
 30         unsigned int            bi_opf;         /* bottom bits req flags,
 31                                                  * top bits REQ_OP. Use
 32                                                  * accessors.
 33                                                  */
 34         unsigned short          bi_flags;       /* status, command, etc */
 35         unsigned short          bi_ioprio;
 36 
 37         struct bvec_iter        bi_iter;
 38 
 39         /* Number of segments in this BIO after
 40          * physical address coalescing is performed.
 41          */
 42         unsigned int            bi_phys_segments;
 43 
 44         /*
 45          * To keep track of the max segment size, we account for the
 46          * sizes of the first and last mergeable segments in this bio.
 47          */
 48         unsigned int            bi_seg_front_size;
 49         unsigned int            bi_seg_back_size;
 50 
 51         atomic_t                __bi_remaining;
 52 
 53         bio_end_io_t            *bi_end_io;
 54 
 55         void                    *bi_private;
 56 #ifdef CONFIG_BLK_CGROUP
 57         /*
 58          * Optional ioc and css associated with this bio.  Put on bio
 59          * release.  Read comment on top of bio_associate_current().
 60          */
 61         struct io_context       *bi_ioc;
 62         struct cgroup_subsys_state *bi_css;
 63 #endif
 64         union {
 65 #if defined(CONFIG_BLK_DEV_INTEGRITY)
 66                 struct bio_integrity_payload *bi_integrity; /* data integrity */
 67 #endif
 68         };
 69 
 70         unsigned short          bi_vcnt;        /* how many bio_vec's */
 71 
 72         /*
 73          * Everything starting with bi_max_vecs will be preserved by bio_reset()
 74          */
 75 
 76         unsigned short          bi_max_vecs;    /* max bvl_vecs we can hold */
 77 
 78         atomic_t                __bi_cnt;       /* pin count */
 79 
 80         struct bio_vec          *bi_io_vec;     /* the actual vec list */
 81 
 82         struct bio_set          *bi_pool;
 83 
 84         /*
 85          * We can inline a number of vecs at the end of the bio, to avoid
 86          * double allocations for a small number of bio_vecs. This member
 87          * MUST obviously be kept at the very end of the bio.
 88          */
 89         struct bio_vec          bi_inline_vecs[0];
 90 };